%%% -*- Mode: LaTeX; -*-

\chapter[Preliminaries]{Preliminaries}
\label{chap:3}

This chapter describes an overview of the theoretical and formal theories required for the formalization of the Central Limit Theorem . This includes HOL Formalization, Measure Theory, Lebesgue Integration, and Probability Theory.
\section{HOL Formalization}
Higher Order Logic (HOL) \cite{hol4, slind2008brief} is derived from the Logic of Computable Functions (LCF) \cite{gordon1979edinburgh, milner1972logic} created by Robin Milner and colleagues in 1972. HOL is an adaptation of Church's Simple Theory of Types (STT) \cite{church1940formulation}, where a higher-order version of Hilbert's choice operator $\varepsilon $, Axiom of Infinity, and Rank-1 polymorphism have been added. HOL4 implements the original HOL framework, while other theorem provers in the HOL family, such as Isabelle/HOL, include important extensions. Such a simple logical basis makes HOL more accessible than those systems founded on much more advanced dependent type theories, such as the Calculus of Inductive and Co-Inductive Constructions constructed by Coq. Therefore, theories and proofs founded on HOL are easier for a layman to comprehend rather than being lost in a complicated type theory.

The word ``HOL'' refers both to the logical system and the software implementing it. HOL4 is the latest version of this software and written in Standard ML (SML), a general-purpose functional programming language.  SML has played the most vital role in the HOL4 for implementing its core engine, enabled automation due to which proof tactics have been written in that and also for interaction, whether it is through a proof script or in direct correspondence with the user. Integrated SML gives a way in which HOL4 is versatile and can easily be extended such that complex verification tools are provided to develop the management of proofs by a user efficiently.

The type system of HOL establishes the structural framework within which all terms and expressions are guaranteed to be well-defined and logically consistent. Types in HOL denote sets within the universe $ U $, and every term bears a certain type. The type grammar is simple and very expressive, and thus able to construct a wide variety of mathematical and logical objects.

The type grammar is defined as:
\[
\sigma ::= \alpha \ | \ c \ | \ (\sigma_1, \ldots, \sigma_n)\text{op} \ | \ \sigma_1 \to \sigma_2
\]
where:
\begin{enumerate}
    \item \textbf{Type Variables ($\alpha, \beta, \ldots$):} Generic placeholders that allow polymorphism to provide functions and predicates over different types.
    \begin{itemize}
        \item Example: The type variable $\alpha$ could indicate integers, Booleans, or functions.
    \end{itemize}

    \item \textbf{Atomic Types ($c$):} Fixed and pre-defined types within HOL. The two initial atomic types are:
    \begin{itemize}
        \item \texttt{bool}: The set of Boolean values $\{T, F\}$.
        \item \texttt{ind}: The set composed by individuals (an infinite set).

    \end{itemize}

    \item \textbf{Compound Types ($(\sigma_1, \ldots, \sigma_n)\text{op}$):} Formed by applying type operators to other types. Their examples include Cartesian products, which designate the tuples over the elements.
    \begin{itemize}
        \item Example: The type $(\texttt{bool}, \texttt{ind}) \times$ represents pairs of a Boolean and an individual.
    \end{itemize}

    \item \textbf{Function Types ($\sigma_1 \to \sigma_2$):} Represent total functions mapping elements from a domain ($\sigma_1$) to a codomain ($\sigma_2$).
    \begin{itemize}
        \item Example: The type $\texttt{bool} \to \texttt{ind}$ indicates a function mapping both Boolean-values to individual-elements.
    \end{itemize}
\end{enumerate}

For example, consider the following types:
\begin{enumerate}
    \item A function from integers to Booleans:
   \[
   f : \texttt{int} \to \texttt{bool}
   \]
   This type indicates that $f(x)$ is a function taking an integer $x$ and returning a Boolean.

    \item A tuple containing a Boolean and a function:
       \[
       p : (\texttt{bool}, (\texttt{int} \to \texttt{bool}))
       \]
       This is a pair type $p = (b, f)$, where $b$ is a Boolean, and $f$ is a function mapping integers to Booleans.
       \item The type system guarantees the consistency by making sure all terms are properly typed. So if $g : \texttt{int} \to \texttt{bool}$, then $g(5)$ as 5 is an integer, but, $g(T)$ would be invalid since $T$ is a Boolean, not an integer. Such stringent typing is at the level of terms to avoid self-contradictory values and assure that proofs built up in HOL are sound.
\end{enumerate}

In HOL, terms are representatives for elements of sets represented by their types. The grammar of the term deÔ¨Ånes the syntax and structure for the logical expressions that can be expressed and hence statements that could be well typed and logically valid. Terms in HOL are constructed from the following components:

\[
t ::= x \ | \ c \ | \ t \ t' \ | \ \lambda x. t
\]

where:
\begin{enumerate}
    \item \textbf{Variables} $(x, y, \ldots):$
    \begin{itemize}
        \item Represent placeholders for elements of a type.
        \item Example: $x : \texttt{bool}$ stands for a Boolean variable.
    \end{itemize}

    \item \textbf{Constants ($c$):}
    \begin{itemize}
        \item Fixed entities such as $T$, $F$, mathematical operators, or predefined functions.
        \item  Example: The constant $+$ defines addition for numeric types.
    \end{itemize}

   \item \textbf{Function Applications ($t \ t'$):}
   \begin{itemize}
       \item Define the application of a function to an argument. The term $f(x)$ applies the function $f$ to the variable $x$.
        \item Example: If $f : \texttt{int} \to \texttt{real}$ and $x : \texttt{int}$, then $f(x)$ is a valid term of type $\texttt{real}$.
   \end{itemize}

\item \textbf{$\lambda$-Abstractions ($\lambda x. t$):}
\begin{itemize}
    \item Denote anonymous functions where $x$ is the input variable, and $t$ is the function body.
    \item Example: $\lambda x. x + 1$ defines a function that increments its input by 1.
\end{itemize}


\end{enumerate}

To ensure consistency, the terms of HOL should be well typed. Given a term $t_{\sigma}$ of type $\sigma$, its grammar can be generalized with type annotations:

\[
t_{\sigma} ::= x_{\sigma} \ | \ c_{\sigma} \ | \ (t_{\sigma_1 \to \sigma_2} \ t'_{\sigma_1})_{\sigma_2} \ | \ (\lambda x_{\sigma_1}. t_{\sigma_2})_{\sigma_1 \to \sigma_2}
\]

HOL's deductive system is considered the logical foundation for forming and checking a proof. HOL's deductive system may consist of eight primitive rules of inference, the definition of new theorems by existing theorems. These rules are the basic components and are required for all logical reasoning within HOL, ensuring that proofs are consistent, logically valid, and traced. The following are the eight main primitive inference rules in HOL:

\begin{enumerate}
    \item \textbf{Assumption Introduction (ASSUME):}
    \begin{itemize}
        \item Introduces a formula as an assumption.
        \item Rule:
          \begin{center}
          \begin{tabular}{c}
            \\ \hline
            $t${\small\verb+ |- +}$t$ \\
          \end{tabular}
        \end{center}
        \item Example: From the assumption $P$, we conclude $P$.
    \end{itemize}

    \item \textbf{Reflexivity (REFL):}
    \begin{itemize}
        \item States that any term is equal to itself.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              \\ \hline
                 {\small\verb+ |- +}$t${\small\verb+ = +}$t$ \\
            \end{tabular}
          \end{center}
        \item Example: For $x : \texttt{int}$, $x = x$ is always true.
    \end{itemize}

    \item \textbf{Beta Conversion (BETA\_CONV):}
    \begin{itemize}
        \item Applies substitution in lambda abstractions.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              \\ \hline
              \holtxt{ |- (\bs$x$.$t_1$)$t_2$ = $t_1[t_2/x]$}
            \end{tabular}
          \end{center}
        \item Example: $(\lambda x. x + 1)(5) \vdash 5 + 1$.
    \end{itemize}

    \item \textbf{Substitution (SUBST):}
    \begin{itemize}
        \item Replaces a term in a formula with another term proven to be equal.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              $\Gamma_1${\small\verb+ |- +} $t_1${\small\verb+=+}$t'_1$ {\small\verb+  +} $\cdots$ {\small\verb+  +}
              $\Gamma_n${\small\verb+ |- +} $t_n${\small\verb+=+}$t'_n$ {\small\verb+  +}
              $\Gamma${\small\verb+ |- +} $t[t_1,\ldots,t_n]$ \\ \hline
              $\Gamma_1 \cup \cdots
              \cup \Gamma_n \cup \Gamma${\small\verb+ |- +} $t[t'_1,\ldots,t'_n]$ \\
            \end{tabular}
          \end{center}
        \item Example: From $x = y$ and $P(x)$, infer $P(y)$.
    \end{itemize}

    \item \textbf{Abstraction (ABS):}
    \begin{itemize}
        \item Generalizes an equation by abstracting a variable.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              $\Gamma${\small\verb+ |- +}$t_1${\small\verb+ = +}$t_2$ \\ \hline
              $\Gamma${\small\verb+ |- (\+}$x${\small\verb+.+}$t_1${\small\verb+) = (\+}$x${\small\verb+.+}$t_2${\small\verb+)+} \\
            \end{tabular}
          \end{center}
        \item Example: From $5 + 1 = 6$, infer $\lambda x. x + 1 = \lambda x. 6$.
    \end{itemize}

    \item \textbf{Type Instantiation (INST\_TYPE):}
    \begin{itemize}
        \item Specializes polymorphic functions or predicates to specific types.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              $\Gamma${\small\verb+ |- +}$t$ \\ \hline
              $\Gamma[\sigma_1,\ \ldots\ ,\sigma_n/\alpha_1,\ \ldots\ ,\alpha_n]${\small\verb+ |- +}$t[\sigma_1,\ \ldots\ ,\sigma_n/\alpha_1,\ \ldots\ ,\alpha_n]$
            \end{tabular}
          \end{center}
        \item Example: Consider the polymorphic identity theorem:
          $     \vdash \forall x.\ x = x
          $
          This holds for any type \texttt{$\alpha$}. Using \texttt{INST\_TYPE}, we can instantiate the type variable to a specific type, such as \texttt{real}. The result is:
          $     \vdash \forall x:\texttt{real}.\ x = x
          $
          This instantiated version now applies to real numbers specifically, which is often necessary in the context of formalising analysis or probability theory, where many theorems apply to real-valued functions or variables.
    \end{itemize}

    \item \textbf{Discharging Assumptions (DISCH):}
    \begin{itemize}
        \item Converts an assumption into an implication.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              $\Gamma${\small\verb+ |- +} $t_2$ \\ \hline
              $\Gamma{-}\{t_1\}${\small\verb+ |- +} $t_1${\small\verb+ ==> +}$t_2$
            \end{tabular}
          \end{center}
        \item Example: From $P \wedge Q$, infer $P \Rightarrow (Q \wedge P)$.
    \end{itemize}

    \item \textbf{Modus Ponens (MP):}
    \begin{itemize}
        \item Combines an implication and its premise to infer the conclusion.
        \item Rule:
          \begin{center}
            \begin{tabular}{c}
              $\Gamma_1${\small\verb+ |- +}$t_1${\small\verb+ ==> +}$t_2$ {\small\verb+     +} $\Gamma_2${\small\verb+ |- +}$t_1$ \\
              \hline
              $\Gamma_1 \cup \Gamma_2${\small\verb+ |- +}$t_2$ \\
            \end{tabular}
          \end{center}
        \item Example: From $x > 0 \Rightarrow x^2 > 0$ and $x > 0$, infer $x^2 > 0$.
    \end{itemize}
\end{enumerate}
These inference rules ensure that all logical derivations are traceable to basic axioms and established theorems. Additionally, the deductive system forms the backbone of HOL4, ensuring that proofs are both rigorous and reliable.

All proofs in HOL are fundamentally derived from a set of primitive inference rules and a core logical foundation. These rules define the semantics of two fundamental logical connectives: \textbf{equality} ($=$) and \textbf{implication} ($\implies$). Other logical connectives and first\-order quantifiers, such as logical truth ($T$), falsehood ($F$), conjunction ($\wedge$), disjunction ($\vee$), and existential quantification ($\exists$), are defined as lambda ($\lambda$) functions for consistency within the HOL framework:

\begin{enumerate}
    \item \textbf{Logical Truth ($T$)}
    \begin{itemize}
    \item Definition:
\begin{alltt}
[T_DEF] \HOLthm[showtypes]{bool.T_DEF}
\end{alltt}
        \item True is represented as the equality of two identical boolean functions.
    \end{itemize}

    \item \textbf{Logical Falsehood ($F$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[F_DEF] \HOLthm[showtypes]{bool.F_DEF}
\end{alltt}
        \item False is defined to satisfy any boolean implication.
    \end{itemize}

    \item \textbf{Negation ($\neg$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[NOT_DEF] \HOLthm[showtypes]{bool.NOT_DEF}
\end{alltt}
        \item Negation is the implication of a boolean value leading to falsehood.
    \end{itemize}

    \item \textbf{Conjunction ($\wedge$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[AND_DEF] \HOLthm[showtypes]{bool.AND_DEF}
\end{alltt}
        \item Conjunction is defined as a logical function that evaluates nested implications.
    \end{itemize}

    \item \textbf{Disjunction ($\vee$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[OR_DEF] \HOLthm[showtypes]{bool.OR_DEF}
\end{alltt}
        \item Disjunction is expressed through sequential implications.
    \end{itemize}

    \item \textbf{Universal Quantifier ($\forall$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[FORALL_DEF]
\HOLthm[showtypes]{bool.FORALL_DEF}
\end{alltt}
        \item Universality asserts that a predicate holds for all elements of a type.
    \end{itemize}

    \item \textbf{Existential Quantifier ($\exists$)}
    \begin{itemize}
        \item Definition:
\begin{alltt}
[EXISTS_DEF]
\HOLthm[showtypes]{bool.EXISTS_DEF}
\end{alltt}
        \item Existence is defined using Hilbert‚Äôs choice operator ($\varepsilon$).
    \end{itemize}

    \item \textbf{One-to-One ($One\_One$)}
HOL also defines constructs for mathematical operations, such as \textbf{one-to-one functions} ($One\_One$) and \textbf{onto functions} ($Onto$), to extend logical capabilities:
\begin{alltt}
[ONE_ONE_DEF]
\HOLthm[showtypes]{bool.ONE_ONE_DEF}
\end{alltt}

    \item \textbf{Onto ($Onto$)}
\begin{alltt}
[ONTO_DEF]
\HOLthm[showtypes]{bool.ONTO_DEF}
\end{alltt}

    \item \textbf{Type Definition}
HOL includes the constant $Type\_Definition$, which defines new types
as bijections of subsets of existing types:
\begin{alltt}
[TYPE_DEFINITION]
\HOLthm[showtypes]{bool.TYPE_DEFINITION}
\end{alltt}
This process is automated by the HOL Datatype package, simplifying the creation of new types.

\end{enumerate}

HOL‚Äôs standard theory is built upon four foundational axioms:
\begin{enumerate}
    \item \textbf{Boolean Cases (BOOL\_CASES\_AX)}
    \begin{itemize}
        \item Axiom
\begin{alltt}
\HOLthm{bool.BOOL_CASES_AX}
\end{alltt}
        \item This axiom ensures that any boolean value is either true or false.
    \end{itemize}

    \item \textbf{Eta Conversion (ETA\_AX)}
    \begin{itemize}
        \item Axiom
\begin{alltt}
\HOLthm{bool.ETA_AX}
\end{alltt}
        \item Eta conversion describes the extensionality of functions.
    \end{itemize}

    \item \textbf{Hilbert‚Äôs Choice (SELECT\_AX)}
    \begin{itemize}
        \item Axiom
\begin{alltt}
\HOLthm{bool.SELECT_AX}
\end{alltt}
        \item This axiom relates the choice operator to existential quantification.
    \end{itemize}

    \item \textbf{Infinity (INFINITY\_AX)}
    \begin{itemize}
        \item Axiom
\begin{alltt}
\HOLthm{bool.INFINITY_AX}
\end{alltt}
        \item The Axiom of Infinity ensures the existence of an infinite set.
    \end{itemize}

\end{enumerate}

These axioms are generally sufficient for conventional formalization projects in HOL4. Adding new axioms is strongly discouraged, as it can compromise logical consistency.

\section{Measure Theory}

Measure theory provides the mathematical foundation for probability
and Lebesgue integration. In this project, we rely on the HOL4 formalisation of measure spaces, $\sigma$-algebras, and measurable functions, as defined in HOL's \texttt{measure} theory~\cite{hol4}.

\subsection{$\sigma$-Algebras}

A $\sigma$-algebra $ \Sigma $ over a set $ X $ is a collection of subsets satisfying:
\begin{itemize}
  \item $ X \in \Sigma $,
  \item If $ A \in \Sigma $, then $ X \setminus A \in \Sigma $,
  \item If $ A_i \in \Sigma $ for all $ i \in \mathbb{N} $, then $ \bigcup_i A_i \in \Sigma $.
  \end{itemize}
The difference between \emph{algebra} and $\sigma$-algebra is that the
former requires closeness of its members over finite unions.

\begin{alltt}
  [sigma_algebra_def]
  \HOLthm{sigma_algebra.sigma_algebra_def}

  [algebra_def]
  \HOLthm{sigma_algebra.algebra_def}
\end{alltt}

\subsection{Measure Spaces}

A \emph{measure space} is a triple $ (X, \Sigma, \mu) $, where:
\begin{itemize}
  \item $ X $ is the underlying space,
  \item $ \Sigma $ is a $ \sigma $-algebra of subsets of $ X $,
  \item $ \mu : \Sigma \to \overline{\mathbb{R}} $ is a measure.
\end{itemize}

In HOL4, these components are represented as:
\begin{alltt}
  [m_space_def]
  \HOLthm{measure.m_space_def}
\end{alltt}

\begin{alltt}
  [measurable_sets_def]
  \HOLthm{measure.measurable_sets_def}
\end{alltt}

\begin{alltt}
  [measure_def]
  \HOLthm{measure.measure_def}
\end{alltt}

A measure $ \mu $ satisfies:

\begin{enumerate}
  \item \textbf{Non-negativity:} $ \mu(A) \geq 0 $ for all $ A \in \Sigma $,
  \item \textbf{Null empty set:} $ \mu(\emptyset) = 0 $,
  \item \textbf{Countable additivity:} For disjoint sets $ \{A_i\} \subseteq \Sigma $,
  \[
    \mu\left(\bigcup_{i=1}^\infty A_i\right) = \sum_{i=1}^\infty \mu(A_i).
  \]
\end{enumerate}

HOL4 uses the extended real number type \texttt{extreal}, which includes $ +\infty $, $ -\infty $, and undefined values, to represent measure values.

\subsection{Borel Sets and Measurable Functions}

A further fundamental building block for probability and Lebesgue integration in HOL4
is the theory of Borel sets and Borel-measurable functions. These are provided by two standard theories: \texttt{real\_borel}, which considers real-valued Borel sets and functions, and \texttt{borel}, which extends these definitions to extended real values (\texttt{extreal}) and builds up Borel and Lebesgue measure spaces.

\paragraph{Borel $\sigma$-Algebra.}
In HOL4, the Borel $\sigma$-algebra on $ \mathbb{R} $, denoted \texttt{borel}, is defined as the smallest $\sigma$-algebra generated by open subsets of $ \mathbb{R} $:

\begin{alltt}
  [borel]
  \HOLthm{real_borel.borel}
\end{alltt}

Equivalently, \texttt{borel} can be generated using various families of half spaces or intervals, e.g $ \{ x \mid x \leq a \} $, $ \{ x \mid a < x < b \} $, and so on.

\paragraph{Extended Borel $\sigma$-Algebra.}
The extended real-valued Borel $\sigma$-algebra, \texttt{Borel}, is defined over the type \texttt{extreal}, which includes $ +\infty $ and $ -\infty $. It extends \texttt{borel} by including atomic sets containing infinities:

\begin{alltt}
  [Borel]
  \HOLthm{borel.Borel}
\end{alltt}

The construction allows for measurable sets to have points at infinity, as required when working with unbounded expectations or improper integrals.

\paragraph{Measurable Functions.}
A function $f : X \to Y$ is measurable from a $\sigma$-algebra $a$ to $b$ if the preimage of every set in $b$ that is measurable is in the $\sigma$-algebra $a$.

Or, formally:

\begin{alltt}
  [measurable_def]
  \HOLthm{sigma_algebra.measurable_def}
\end{alltt}

To simplify notation, HOL4 introduces:
\begin{hol}
\begin{verbatim}
val _ = overload_on ("borel_measurable", ``\a. measurable a borel``);
val _ = overload_on ("Borel_measurable", ``\a. measurable a Borel``);
\end{verbatim}
\end{hol}

Thus, a real-valued function is \texttt{borel\_measurable a} if measurable with respect to \texttt{borel}, and similarly for \texttt{Borel\_measurable a} for extended real-valued functions.

\paragraph{Measurability Closure Properties.}
Both \texttt{borel\_measurable} and \texttt{Borel\_measurable} are closed under arithmetic operations such as addition, subtraction, and multiplication. For example, if $ f, g \in \texttt{borel\_measurable a} $, then $ f + g $, $ f - g $, and $ f \cdot g $ are also in \texttt{borel\_measurable a}.

\begin{alltt}
  [in_borel_measurable_add]
  \HOLthm{real_borel.in_borel_measurable_add}
\end{alltt}

\begin{alltt}
  [IN_MEASURABLE_BOREL_ADD']
  \HOLthm{borel.IN_MEASURABLE_BOREL_ADD'}
\end{alltt}

\begin{alltt}
  [in_borel_measurable_sub]
  \HOLthm{real_borel.in_borel_measurable_sub}
\end{alltt}

\begin{alltt}
  [IN_MEASURABLE_BOREL_SUB']
  \HOLthm{borel.IN_MEASURABLE_BOREL_SUB'}
\end{alltt}

\begin{alltt}
  [in_borel_measurable_mul]
  \HOLthm{real_borel.in_borel_measurable_mul}
\end{alltt}

\begin{alltt}
  [IN_MEASURABLE_BOREL_TIMES']
  \HOLthm{borel.IN_MEASURABLE_BOREL_TIMES'}
\end{alltt}

In fact, if a real-valued function is Borel-measurable, then its extension to extreal values is also Borel-measurable, and vice versa.

\begin{alltt}
  [IN_MEASURABLE_BOREL_IMP_BOREL']
  \HOLthm{borel.IN_MEASURABLE_BOREL_IMP_BOREL'}
\end{alltt}

\begin{alltt}
  [in_borel_measurable_from_Borel]
  \HOLthm{borel.in_borel_measurable_from_Borel}
\end{alltt}

\section{Lebesgue Integration Theory}

HOL4 formalisation of Lebesgue integration provides a strong foundation for reasoning about expectations, variances, and convergence in probability. This section briefly introduces the key constructs and theorems that we use throughout the Central Limit Theorem formalisation.

\subsection{Positive Simple Functions and Integration}

Nonnegative measurable functions in HOL4 are approximated by positive simple functions, piecewise constant functions taking finitely many values on measurable disjoint sets. A function $f$ is represented as:

\[
f(x) = \sum_{j=1}^n y_j \cdot \mathbf{1}_{A_j}(x), \quad \text{where } A_j \text{ are disjoint measurable sets}.
\]

This is formalised in HOL4 using:
\begin{hol}
\begin{alltt}
  [pos_simple_fn_def]
  \HOLthm{lebesgue.pos_simple_fn_def}
\end{alltt}
\end{hol}


The integral of such a function is defined as:
\begin{alltt}
  [pos_simple_fn_integral_def]
  \HOLthm{lebesgue.pos_simple_fn_integral_def}
\end{alltt}

\subsection{Positive and General Lebesgue Integral}

The positive integral of a nonnegative function $f$ is defined as the supremum of the integrals of all positive simple functions below $f$:

\begin{alltt}
 [pos_fn_integral_def]
\HOLthm{lebesgue.pos_fn_integral_def}
\end{alltt}


The general Lebesgue integral of a function $f$ is defined as:

\[
\int f = \int^+ f^+ - \int^+ f^-
\]
where $f^+ = \max(f, 0)$ and $f^- = \max(-f, 0)$.

\begin{alltt}
 [integral_def]
\HOLthm{lebesgue.integral_def}
\end{alltt}

\begin{alltt}
 [fn_plus_def]
 \HOLthm{extreal.fn_plus_def}
\end{alltt}

\begin{alltt}
  [fn_minus_def]
 \HOLthm{extreal.fn_minus_def}
\end{alltt}


\subsection{Integrability}

A function is integrable if it is Borel-measurable and the integrals of both its positive and negative parts are finite:

\begin{alltt}
 [integrable_def]
\HOLthm{lebesgue.integrable_def}
\end{alltt}


\subsection{Almost Everywhere and Null Sets}

A property $P(x)$ holds almost everywhere (AE) if it holds outside of a null set:

\begin{alltt}
  [AE_DEF]
  \HOLthm{borel.AE_DEF}
\end{alltt}


\subsection{Monotone Convergence Theorem}

In approximating general nonnegative functions by simple functions, the following theorem allows taking limits under the integral:

\begin{alltt}
  [lebesgue_monotone_convergence]
  \HOLthm{lebesgue.lebesgue_monotone_convergence}

  [lebesgue_monotone_convergence_decreasing]
  \HOLthm{lebesgue.lebesgue_monotone_convergence_decreasing}
\end{alltt}


\subsection{Fubini and Tonelli Theorems}

In formalising the Lindeberg replacement method, we often integrate over product spaces involving independent sequences of random variables. To justify iterated integrals in these settings, we rely on HOL4‚Äôs formalisation of Tonelli‚Äôs and Fubini‚Äôs Theorems, which ensure that integrals over product measure spaces can be computed as nested one-dimensional integrals.

\paragraph{Tonelli's Theorem.}
Tonelli's theorem applies to nonnegative functions and guarantees that the double integral equals the iterated integral regardless of whether the value is finite or infinite:

\begin{alltt}
  [TONELLI]
  \HOLthm{martingale.TONELLI}
\end{alltt}


\paragraph{Fubini's Theorem.}
Fubini‚Äôs theorem generalises Tonelli‚Äôs result to integrable (not necessarily nonnegative) functions. It justifies interchanging the order of integration under integrability assumptions:

\begin{alltt}
  [FUBINI]
  \HOLthm{martingale.FUBINI}
\end{alltt}

In this thesis, these theorems are applied in constructing auxiliary sequences of independent random variables from product spaces and evaluating their expectations. Their use guarantees that swapping integration order is mathematically and formally valid in our HOL4 development.

\subsection{$\mathcal{L}^p$ Spaces and Fundamental Inequalities}

In HOL4, the $\mathcal{L}^p$ space over a measure space $m$ is defined as the set of (extended) real-valued Borel-measurable functions whose $p$-th absolute power is integrable:

\begin{alltt}
  [lp_space_alt_finite]
  \HOLthm{martingale.lp_space_alt_finite}
\end{alltt}


The associated seminorm is defined as:

\[
\|f\|_p := \left( \int |f(x)|^p \, \mathrm{d}\mu(x) \right)^{1/p}
\]

\begin{alltt}
  [seminorm_normal]
  \HOLthm{martingale.seminorm_normal}
\end{alltt}

This seminorm forms the basis for all moment bounds and continuity results used in the CLT proof. In particular, the finiteness of third moments used in Lyapunov's condition corresponds to membership in $\mathcal{L}^3$.

\paragraph{H√∂lder‚Äôs Inequality.}
For functions $u \in \mathcal{L}^p(m)$ and $v \in \mathcal{L}^q(m)$ where $1/p + 1/q = 1$, H√∂lder‚Äôs inequality bounds their product:

\begin{alltt}
  [Hoelder_inequality]
  \HOLthm{martingale.Hoelder_inequality}
\end{alltt}


\paragraph{Minkowski‚Äôs Inequality.}
Also known as the triangle inequality for $\mathcal{L}^p$ norms:

\begin{alltt}
  [Minkowski_inequality]
  \HOLthm{martingale.Minkowski_inequality}
\end{alltt}

\paragraph{Cauchy‚ÄìSchwarz Inequality.}
This is H√∂lder's inequality for the particular case $p = q = 2$, which assures us that the inner products of square-integrable functions are bounded:
\begin{alltt}
  [Cauchy_Schwarz_inequality]
  \HOLthm{martingale.Cauchy_Schwarz_inequality}
\end{alltt}

These inequalities are foundational tools in functional analysis. In this thesis, only H√∂lder‚Äôs inequality is explicitly used‚Äînamely, in the proof of the Lyapunov inequality (`liapounov\_ineq\_lemma`) to relate $L^p$ norms. While Minkowski‚Äôs and Cauchy‚ÄìSchwarz inequalities are stated here for completeness, they were not directly invoked in the formalisation. The Taylor approximation error in the CLT proof is instead bounded via a custom lemma using Lyapunov‚Äôs inequality and third moment control.


\section{Probability Theory}

This section reviews the essential formal components of probability theory used throughout the formalisation of the Central Limit Theorem (CLT) in HOL4. We focus on probability spaces, random variables, independence, expectation, variance, and convergence of random sequences‚Äîonly including results directly used or closely related to our proof.

\subsection{Probability Spaces}

A probability space is a triple $(\Omega, \mathscr{F}, \mathscr{P})$, where $\Omega$ is the sample space, $\mathscr{F}$ is a $\sigma$-algebra of measurable events, and $\mathscr{P}$ is a probability measure satisfying $\mathscr{P}(\Omega) = 1$. In HOL4, this is encoded as:

\begin{alltt}
  [prob_space_def]
  \HOLthm{probability.prob_space_def}
\end{alltt}


All the fundamental components of a probability space‚Äîevent sets, probability values, and sample spaces‚Äîare accessed via:

\begin{alltt}
  \HOLthm{probability.p_space_def}
  \HOLthm{probability.events_def}
  \HOLthm{probability.prob_def}
\end{alltt}

\subsection{Random Variables and Distributions}

A random variable is a measurable function $X : \Omega \rightarrow \mathbb{R}$ from a probability space to the Borel $\sigma$-algebra. HOL4 defines real-valued random variables as:

\begin{alltt}
  [real_random_variable_def]
  \HOLthm{probability.real_random_variable_def}
\end{alltt}

The distribution of a random variable is the pushforward measure of $X$:
\begin{alltt}
  [distribution_def]
  \HOLthm{probability.distribution_def}
\end{alltt}

The corresponding cumulative distribution function (cdf) is:

\begin{alltt}
  [distribution_function_def]
  \HOLthm{probability.distribution_function_def}
\end{alltt}

\subsection{Mathematical Expectation and Moments}

Expectation is defined as Lebesgue integration over a probability space:

\begin{alltt}
  [expectation_def]
  \HOLthm{probability.expectation_def}
\end{alltt}

A variable is integrable if its absolute value has finite integral. Variance is defined as the second central moment:

\begin{alltt}
  [variance_eq]
  \HOLthm{probability.variance_eq}
\end{alltt}

This thesis frequently verifies integrability and bounds on moments, e.g., when applying Lyapunov's condition or Taylor approximation.

\subsection{Independence}

Random variables $X_i$ are independent if for all measurable sets $A_i$, their inverse images under $X_i$ form independent events. HOL4 formalises total independence of a sequence via:

\begin{alltt}
  [indep_vars_def]
  \HOLthm{probability.indep_vars_def}
\end{alltt}

\begin{alltt}
  [indep_rv_def]
  \HOLthm{probability.indep_rv_def}
\end{alltt}


We use this extensively when constructing auxiliary sequences for the Lindeberg method.

\subsection{Convergence of Random Sequences}

In our formalisation of the Central Limit Theorem, we primarily rely on \emph{convergence in distribution}, which captures the idea that the sequence of random variables $X_n$ becomes increasingly close to a limiting variable $Y$ in terms of their probability distributions.

Formally, convergence in distribution is defined in HOL4 as:

\begin{alltt}
  [converge_in_dist_alt]
  \HOLthm{distribution.converge_in_dist_alt}
\end{alltt}


This equivalence allows us to reduce convergence in distribution to pointwise convergence of the associated distributions.

A more analytic characterisation‚Äîuseful in proofs using Taylor approximations and moment estimates‚Äîis given by:
\begin{alltt}
  [converge_in_dist_alt']
  \HOLthm{distribution.converge_in_dist_alt'}
\end{alltt}


This version states that convergence in distribution is equivalent to the convergence of expectations for all bounded continuous test functions $ f $, which aligns closely with the Portmanteau theorem.

In our CLT proof, this form enables us to focus on expectations of composed functions and verify the convergence using Taylor expansion and moment bounds, without needing pointwise or $ L^p $ convergence of random variables.

\subsection{Summary}

This section outlines only the essential building blocks from HOL4's formalisation of probability theory that are directly used in the formalisation of the CLT using the Lindeberg method. In particular, it sets up the notion of independence, variance control, and convergence that underpin the proof strategy.
